// Code generated by MockGen. DO NOT EDIT.
// Source: internal/events/event.go

// Package events is a generated GoMock package.
package events

import (
	context "context"
	reflect "reflect"

	models "github.com/blr-coder/tasks-svc/internal/domain/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIEventSender is a mock of IEventSender interface.
type MockIEventSender struct {
	ctrl     *gomock.Controller
	recorder *MockIEventSenderMockRecorder
}

// MockIEventSenderMockRecorder is the mock recorder for MockIEventSender.
type MockIEventSenderMockRecorder struct {
	mock *MockIEventSender
}

// NewMockIEventSender creates a new mock instance.
func NewMockIEventSender(ctrl *gomock.Controller) *MockIEventSender {
	mock := &MockIEventSender{ctrl: ctrl}
	mock.recorder = &MockIEventSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventSender) EXPECT() *MockIEventSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockIEventSender) Send(ctx context.Context, event *Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockIEventSenderMockRecorder) Send(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIEventSender)(nil).Send), ctx, event)
}

// SendTaskCreated mocks base method.
func (m *MockIEventSender) SendTaskCreated(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskCreated", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTaskCreated indicates an expected call of SendTaskCreated.
func (mr *MockIEventSenderMockRecorder) SendTaskCreated(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskCreated", reflect.TypeOf((*MockIEventSender)(nil).SendTaskCreated), ctx, task)
}

// SendTaskDeleted mocks base method.
func (m *MockIEventSender) SendTaskDeleted(ctx context.Context, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskDeleted", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTaskDeleted indicates an expected call of SendTaskDeleted.
func (mr *MockIEventSenderMockRecorder) SendTaskDeleted(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskDeleted", reflect.TypeOf((*MockIEventSender)(nil).SendTaskDeleted), ctx, taskID)
}

// SendTaskUpdated mocks base method.
func (m *MockIEventSender) SendTaskUpdated(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTaskUpdated", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTaskUpdated indicates an expected call of SendTaskUpdated.
func (mr *MockIEventSenderMockRecorder) SendTaskUpdated(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTaskUpdated", reflect.TypeOf((*MockIEventSender)(nil).SendTaskUpdated), ctx, task)
}
